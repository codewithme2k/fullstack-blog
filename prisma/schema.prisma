// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  MANAGER
}

enum CourseStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CourseLevel {
  EASY
  MEDIUM
  EXPERT
}

enum CourseLabel {
  NONE
  // Add other label values here
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id                      String                 @id @default(uuid())
  clerkId                 String
  name                    String?
  email                   String?                @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    UserRole               @default(USER)
  accounts                Account[]
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?
  isDestroyed             Boolean                @default(false)
  Course                  Course[]
  Comment                 Comment[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  subCategories SubCategory[]
  Course        Course[]
}

model SubCategory {
  id   String @id @default(uuid())
  name String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
}

model Level {
  id   String @id @default(uuid())
  name String @unique
}

model Course {
  id          String       @id @default(uuid())
  title       String
  slug        String       @unique
  price       Float        @default(0)
  salePrice   Float        @default(0)
  desc        String       @db.Text
  content     String       @db.Text
  image       String       @default("/default.jpg")
  intro       String       @db.Text
  status      CourseStatus @default(PENDING)
  level       CourseLevel  @default(EASY)
  label       CourseLabel  @default(NONE)
  categoryId  String?
  category    Category?    @relation(fields: [categoryId], references: [id])
  info        Json
  lectures    Lecture[]
  lessons     Lesson[]
  comments    Comment[]
  authorId    String
  author      User         @relation(fields: [authorId], references: [id])
  views       Int          @default(0)
  cta         String       @default("Mua ngay")
  ctaLink     String?
  createdAt   DateTime     @default(now())
  seoKeywords String?
  free        Boolean      @default(false)
  isDestroyed Boolean      @default(false) @map("_destroy")

  @@index([categoryId])
  @@index([authorId])
}

model Lecture {
  id          String   @id @default(uuid())
  title       String
  order       Int      @default(0)
  lessons     Lesson[]
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  createdAt   DateTime @default(now())
  isDestroyed Boolean  @default(false) @map("_destroy")

  @@index([courseId])
}

model Lesson {
  id          String    @id @default(uuid())
  title       String
  slug        String    @unique
  type        String    @default("video")
  video       String    @default("")
  duration    Int       @default(0)
  content     String?   @db.Text
  status      String    @default("draft")
  order       Int       @default(0)
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id])
  lectureId   String
  lecture     Lecture   @relation(fields: [lectureId], references: [id])
  views       Int       @default(0)
  comments    Comment[]
  assetId     String?
  createdAt   DateTime  @default(now())
  isDestroyed Boolean   @default(false) @map("_destroy")

  @@index([courseId])
  @@index([lectureId])
}

model Comment {
  id        String        @id @default(uuid())
  content   String        @db.Text
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  courseId  String
  course    Course        @relation(fields: [courseId], references: [id])
  lessonId  String
  lesson    Lesson        @relation(fields: [lessonId], references: [id])
  status    CommentStatus @default(PENDING)
  parentId  String?
  parent    Comment?      @relation("CommentToComment", fields: [parentId], references: [id])
  replies   Comment[]     @relation("CommentToComment")
  createdAt DateTime      @default(now())

  @@index([userId])
  @@index([courseId])
  @@index([lessonId])
  @@index([parentId])
}
